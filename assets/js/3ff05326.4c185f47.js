"use strict";(self.webpackChunksolus_help_center=self.webpackChunksolus_help_center||[]).push([[2775],{4137:(t,e,a)=>{a.d(e,{Zo:()=>s,kt:()=>g});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var p=n.createContext({}),d=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},s=function(t){var e=d(t.components);return n.createElement(p.Provider,{value:e},t.children)},m="mdxType",k={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),m=d(a),u=r,g=m["".concat(p,".").concat(u)]||m[u]||k[u]||l;return a?n.createElement(g,i(i({ref:e},s),{},{components:a})):n.createElement(g,i({ref:e},s))}));function g(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[m]="string"==typeof t?t:r,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2355:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var n=a(7462),r=(a(7294),a(4137));const l={title:"Package YAML",summary:"Learning the package.yml packaging format",date:new Date("2022-12-16T00:00:00.000Z")},i="Package.yml",o={unversionedId:"packaging/package.yml",id:"packaging/package.yml",title:"Package YAML",description:"All packages are generated from a single build file, which provides all of the required metadata for the package manager, plus the packaging steps involved to produce a package. This follows the YAML specification.",source:"@site/docs/packaging/package.yml.md",sourceDirName:"packaging",slug:"/packaging/package.yml",permalink:"/docs/packaging/package.yml",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/packaging/package.yml.md",tags:[],version:"current",frontMatter:{title:"Package YAML",summary:"Learning the package.yml packaging format",date:"2022-12-16T00:00:00.000Z"},sidebar:"packagingSidebar",previous:{title:"Local Repository",permalink:"/docs/packaging/local-repository"},next:{title:"Packaging Practices",permalink:"/docs/packaging/packaging-practices"}},p={},d=[{value:"Format",id:"format",level:2},{value:"Keys",id:"keys",level:2},{value:"Mandatory Keys",id:"mandatory-keys",level:3},{value:"Optional, supported keys",id:"optional-supported-keys",level:3},{value:"Packaging Step Keys, optional",id:"packaging-step-keys-optional",level:3},{value:"Optimize values",id:"optimize-values",level:2},{value:"Macros",id:"macros",level:2},{value:"Usage",id:"usage",level:3},{value:"Actionable Macros",id:"actionable-macros",level:3},{value:"Haskell Actionable Macros",id:"haskell-actionable-macros",level:3},{value:"Ninja Actionable Macros",id:"ninja-actionable-macros",level:3},{value:"Perl Actionable Macros",id:"perl-actionable-macros",level:3},{value:"Python Actionable Macros",id:"python-actionable-macros",level:3},{value:"Ruby Actionable Macros",id:"ruby-actionable-macros",level:3},{value:"Qt Actionable Macros",id:"qt-actionable-macros",level:3},{value:"Waf Actionable Macros",id:"waf-actionable-macros",level:3},{value:"Variable Macros",id:"variable-macros",level:3},{value:"Variables",id:"variables",level:2},{value:"Types",id:"types",level:2},{value:"string",id:"string",level:3},{value:"string(s)",id:"strings",level:3},{value:"integer",id:"integer",level:3},{value:"list",id:"list",level:3},{value:"dict",id:"dict",level:3},{value:"dict(s)",id:"dicts",level:3},{value:"Packaging Practices",id:"packaging-practices",level:2}],s={toc:d},m="wrapper";function k(t){let{components:e,...a}=t;return(0,r.kt)(m,(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"packageyml"},"Package.yml"),(0,r.kt)("p",null,"All packages are generated from a single build file, which provides all of the required metadata for the package manager, plus the packaging steps involved to produce a package. This follows the YAML specification."),(0,r.kt)("h2",{id:"format"},"Format"),(0,r.kt)("p",null,"All ",(0,r.kt)("inlineCode",{parentName:"p"},"package.yml")," files ",(0,r.kt)("strong",{parentName:"p"},"must")," be valid YAML."),(0,r.kt)("p",null,"The file is organised into a key\u2192value hierarchy. The ",(0,r.kt)("inlineCode",{parentName:"p"},"ypkg")," tool parses a ",(0,r.kt)("inlineCode",{parentName:"p"},"package.yml")," file to build the corresponding package in a declarative manner, so most of the keys are simple strings, lists or nested key\u2192value pairs. A special case consists in the packaging steps, which are scripts."),(0,r.kt)("p",null,"An example file follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"name       : nano\nversion    : 2.9.5\nrelease    : 96\nsource     :\n    - https://www.nano-editor.org/dist/v2.9/nano-2.9.5.tar.xz : 7b8d181cb57f42fa86a380bb9ad46abab859b60383607f731b65a9077f4b4e19\nlicense    : GPL-3.0-or-later\nsummary    : Small, friendly text editor inspired by Pico\ncomponent  : system.devel\ndescription: |\n    GNU nano is an easy-to-use text editor originally designed as a replacement for Pico, the ncurses-based editor from the non-free mailer package Pine (itself now available under the Apache License as Alpine).\nsetup      : |\n    %patch -p1 < $pkgfiles/0001-Use-a-stateless-configuration.patch\n    %reconfigure --enable-utf8 --docdir=/usr/share/doc/nano\nbuild      : |\n    %make\ninstall    : |\n    %make_install\n    install -D -m 00644 $pkgfiles/nanorc $installdir/usr/share/defaults/nano/nanorc\n    install -D -m 00644 $pkgfiles/git.nanorc $installdir/usr/share/nano/git.nanorc\n    # https://github.com/scopatz/nanorc\n    for rcFile in $pkgfiles/nanorc-extras/*.nanorc; do\n        install -m 00644 $rcFile $installdir/usr/share/nano\n    done\n")),(0,r.kt)("h2",{id:"keys"},"Keys"),(0,r.kt)("p",null,"Not all fields in ",(0,r.kt)("inlineCode",{parentName:"p"},"package.yml")," are mandatory, but a small selection are. Below is the complete list of the available fields."),(0,r.kt)("h3",{id:"mandatory-keys"},"Mandatory Keys"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the package. This is also used as the base of all sub-package names. Unless unavoidable, this should match the upstream name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"version")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"The version of the currently packaged software. This is taken from the tarball in most cases.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"release")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"integer")),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the current release number. Updates in the package number are based on this ",(0,r.kt)("inlineCode",{parentName:"td"},"release")," number, ",(0,r.kt)("em",{parentName:"td"},"not")," the ",(0,r.kt)("inlineCode",{parentName:"td"},"version")," number. As such, to release an update to users, this number must be incremented by one.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"license")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string(s)")),(0,r.kt)("td",{parentName:"tr",align:null},"Valid upstream license(s). Try to ensure these use ",(0,r.kt)("a",{parentName:"td",href:"https://spdx.org/licenses/"},"SPDX identifiers"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"source")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dict(s)")),(0,r.kt)("td",{parentName:"tr",align:null},"Upstream source URL (i.e. tarball), with the valid ",(0,r.kt)("inlineCode",{parentName:"td"},"sha256sum")," as a value. Alternatively, the git repository URL prefixed with `git")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"component")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Component / group of packages this package belongs to. Check available components via ",(0,r.kt)("inlineCode",{parentName:"td"},"eopkg lc"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"summary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Brief package summary, or display name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"description")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"More extensive description of the software, usually taken from the vendor website.")))),(0,r.kt)("h3",{id:"optional-supported-keys"},"Optional, supported keys"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"clang")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"yes")," if this package benefits from being built with Clang.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"extract")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"no")," to disable automatic source extraction.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"autodep")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"no")," to disable automatic binary dependency resolution at build time.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"emul32")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"yes")," to enable an ",(0,r.kt)("inlineCode",{parentName:"td"},"-m32")," build (32-bit libs).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"libsplit")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"no")," to disable splitting of libraries into ",(0,r.kt)("inlineCode",{parentName:"td"},"devel")," sub-packages.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"conflicts")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string(s)")),(0,r.kt)("td",{parentName:"tr",align:null},"Specify packages that cannot be installed together with this one.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"optimize")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"list")),(0,r.kt)("td",{parentName:"tr",align:null},"Specify preset keys to modify compiler and linker flags during build. You can learn more ",(0,r.kt)("a",{parentName:"td",href:"/docs/packaging/package.yml#optimize-values"},"here"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"builddeps")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"list")),(0,r.kt)("td",{parentName:"tr",align:null},"Specify build dependencies for the package. You can learn more ",(0,r.kt)("a",{parentName:"td",href:"/docs/packaging/packaging-practices#build-dependencies"},"here"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"rundeps")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dict(s)")),(0,r.kt)("td",{parentName:"tr",align:null},"Specify further runtime dependencies for the packages. You can learn more ",(0,r.kt)("a",{parentName:"td",href:"/docs/packaging/packaging-practices#runtime-dependencies"},"here"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"replaces")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dict(s)")),(0,r.kt)("td",{parentName:"tr",align:null},"Replace one package with another, used when renaming or deprecating packages for clean upgrade paths.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"patterns")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dict(s)")),(0,r.kt)("td",{parentName:"tr",align:null},"Allows fine grained control over file placement within the package or sub-packages. Useful for packages that are development only (i.e. ",(0,r.kt)("inlineCode",{parentName:"td"},"/usr/bin")," files).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"environment")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unicode")),(0,r.kt)("td",{parentName:"tr",align:null},"Specify code that will be exported to all packaging steps of the build (i.e. exporting variables for the entire build).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"networking")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Set to ",(0,r.kt)("inlineCode",{parentName:"td"},"yes")," to enable networking within solbuild.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"homepage")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:null},"Provides a link to the package's homepage in the Software Center.")))),(0,r.kt)("h3",{id:"packaging-step-keys-optional"},"Packaging Step Keys, optional"),(0,r.kt)("p",null,"The packaging steps are all considered optional, however the absence of the ",(0,r.kt)("inlineCode",{parentName:"p"},"install")," step will result in no package generated. Each of these keys contains content that will be placed within a script and executed within a controlled environment to perform the package build. For all intents and purposes, they are Bash scripts with a predefined environment."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Step Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"setup")),(0,r.kt)("td",{parentName:"tr",align:null},"Performed after the source extraction. This is the correct place to perform any ",(0,r.kt)("inlineCode",{parentName:"td"},"configure")," routine, or to ",(0,r.kt)("inlineCode",{parentName:"td"},"patch")," the sources.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"build")),(0,r.kt)("td",{parentName:"tr",align:null},"Use this step to run the build portion, i.e. ",(0,r.kt)("inlineCode",{parentName:"td"},"make"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"install")),(0,r.kt)("td",{parentName:"tr",align:null},"This is where you should install the files into the final packaging directory, i.e. ",(0,r.kt)("inlineCode",{parentName:"td"},"make install"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"check")),(0,r.kt)("td",{parentName:"tr",align:null},"This is where tests / checking should occur, i.e. ",(0,r.kt)("inlineCode",{parentName:"td"},"make check"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"profile")),(0,r.kt)("td",{parentName:"tr",align:null},"This is where profiling tests should be specified. ",(0,r.kt)("inlineCode",{parentName:"td"},"ypkg")," will handle setting flags to generate profiling data and using that data for an optimized build.")))),(0,r.kt)("h2",{id:"optimize-values"},"Optimize values"),(0,r.kt)("p",null,"One or more optimize values can be specified in a list with the optimize key in the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.yml")," file. Several values can override or conflict with each other and should be used only where they provide a performance benefit, or fix a bug in the package or build."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Optimize Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"speed")),(0,r.kt)("td",{parentName:"tr",align:null},"Optimise the package for performance ",(0,r.kt)("inlineCode",{parentName:"td"},"-O3")," plus other flags.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"size")),(0,r.kt)("td",{parentName:"tr",align:null},"Optimize the package build to minimize size ",(0,r.kt)("inlineCode",{parentName:"td"},"-Os"),". Not supported with clang.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"no-bind-now")),(0,r.kt)("td",{parentName:"tr",align:null},"Configure the package to disable certain flags, where RELRO is unsupported.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"no-symbolic")),(0,r.kt)("td",{parentName:"tr",align:null},"Disable ",(0,r.kt)("inlineCode",{parentName:"td"},"-Wl,-Bsymbolic-functions")," linker flag.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"unroll-loops")),(0,r.kt)("td",{parentName:"tr",align:null},"Enable ",(0,r.kt)("inlineCode",{parentName:"td"},"-funroll-loops"),". Use this sparingly, only when it provides proven benefit.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"runpath")),(0,r.kt)("td",{parentName:"tr",align:null},"Enable ",(0,r.kt)("inlineCode",{parentName:"td"},"-Wl,--enable-new-dtags")," to make linker use RUNPATH's instead of RPATH's.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"avx256")),(0,r.kt)("td",{parentName:"tr",align:null},"Disables ",(0,r.kt)("inlineCode",{parentName:"td"},"-mprefer-vector-width=128")," in avx2 builds.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"thin-lto")),(0,r.kt)("td",{parentName:"tr",align:null},"Enable Thin Link Time Optimization ",(0,r.kt)("inlineCode",{parentName:"td"},"-flto=thin")," with a supported linker.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"lto")),(0,r.kt)("td",{parentName:"tr",align:null},"Enable Link Time Optimization ",(0,r.kt)("inlineCode",{parentName:"td"},"-flto"),".")))),(0,r.kt)("h2",{id:"macros"},"Macros"),(0,r.kt)("p",null,"To further assist in packaging, a number of macros are available. These are simply shorthand ways to perform a normal build operation. They also ensure that the resulting package is consistent. These macros are only available in our packaging steps, as they are substituted within the script before execution."),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Macros are prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"%"),", and are substituted before your script is executed. Macros ending with ",(0,r.kt)("inlineCode",{parentName:"p"},"%")," are used to provide directory names or build values, to the script."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Run the configure macro with the given arguments\n%configure --disable-static\n")),(0,r.kt)("h3",{id:"actionable-macros"},"Actionable Macros"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Macro"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%autogen")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs autogen with our ",(0,r.kt)("inlineCode",{parentName:"td"},"%CONFOPTS%")," to create a configure script then proceeds to run ",(0,r.kt)("inlineCode",{parentName:"td"},"%configure"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%cmake")),(0,r.kt)("td",{parentName:"tr",align:null},"Configure cmake project with the distribution specific options, such as prefix and release type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%cmake_ninja")),(0,r.kt)("td",{parentName:"tr",align:null},"Configure cmake project with ninja so it can be used with ",(0,r.kt)("inlineCode",{parentName:"td"},"%ninja_build"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"%ninja_install")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"%ninja_check")," macros.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%configure")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs ",(0,r.kt)("inlineCode",{parentName:"td"},"./configure")," with our ",(0,r.kt)("inlineCode",{parentName:"td"},"%CONFOPTS%")," variable macro.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%make")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs the ",(0,r.kt)("inlineCode",{parentName:"td"},"make")," command with the job count specified in ",(0,r.kt)("inlineCode",{parentName:"td"},"eopkg.conf"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%make_install")),(0,r.kt)("td",{parentName:"tr",align:null},"Perform a ",(0,r.kt)("inlineCode",{parentName:"td"},"make install"),", using the ",(0,r.kt)("inlineCode",{parentName:"td"},"DESTDIR")," variant. Should work for the vast majority of packages.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%patch")),(0,r.kt)("td",{parentName:"tr",align:null},"Sane patch macro to run in batch mode and not contaminate source tree on failure")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%apply_patches")),(0,r.kt)("td",{parentName:"tr",align:null},"Applies all patches listed in the ",(0,r.kt)("inlineCode",{parentName:"td"},"series")," file in ",(0,r.kt)("inlineCode",{parentName:"td"},"./files")," folder.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%reconfigure")),(0,r.kt)("td",{parentName:"tr",align:null},"Updates build scripts such as ",(0,r.kt)("inlineCode",{parentName:"td"},"./configure")," and proceeds to run ",(0,r.kt)("inlineCode",{parentName:"td"},"%configure"),".")))),(0,r.kt)("h3",{id:"haskell-actionable-macros"},"Haskell Actionable Macros"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Macro"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%cabal_configure")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs cabal configure with prefix, libdir, etc. and ensures the necessary package.conf.d is copied to the correct location.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%cabal_build")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs cabal build with ",(0,r.kt)("inlineCode",{parentName:"td"},"%JOBS%"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%cabal_install")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs cabal copy to ",(0,r.kt)("inlineCode",{parentName:"td"},"$installdir"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%cabal_register")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs cabal register to generate a pkg-config for package and version, then installs the conf file.")))),(0,r.kt)("h3",{id:"ninja-actionable-macros"},"Ninja Actionable Macros"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Macro"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%meson_configure")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs meson with our CFLAGS and appropriate flags such as libdir.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%ninja_build")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs ninja and passes our ",(0,r.kt)("inlineCode",{parentName:"td"},"%JOBS%")," variable. This macro obsoletes ",(0,r.kt)("em",{parentName:"td"},"%meson_build"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%ninja_install")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs meson install and passed the appropriate ",(0,r.kt)("inlineCode",{parentName:"td"},"DESTDIR")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"%JOBS%")," variable. This macro obsoletes ",(0,r.kt)("em",{parentName:"td"},"%meson_install"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%ninja_check")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs ninja test and passes our ",(0,r.kt)("inlineCode",{parentName:"td"},"%JOBS%")," variable. This macro obsoletes ",(0,r.kt)("em",{parentName:"td"},"%meson_check"),".")))),(0,r.kt)("h3",{id:"perl-actionable-macros"},"Perl Actionable Macros"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Macro"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%perl_setup")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs Perl setup scripts Build.pl or Makefile.pl with the appropriate variable flags.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%perl_build")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs Perl build scripts or attempts ",(0,r.kt)("inlineCode",{parentName:"td"},"%make"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%perl_install")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs Perl install scripts or attempts ",(0,r.kt)("inlineCode",{parentName:"td"},"%make_install"),".")))),(0,r.kt)("h3",{id:"python-actionable-macros"},"Python Actionable Macros"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Macro"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%python_setup")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs the build portion of a setup.py using python2.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%python_install")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs the install portion of a setup.py, to the appropriate root, using python2.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%python_test")),(0,r.kt)("td",{parentName:"tr",align:null},"Without argument, runs the test portion of setup.py. With a ",(0,r.kt)("inlineCode",{parentName:"td"},".py"),' script, execute the script with python2. With something else execute the command "as it is". (',(0,r.kt)("a",{parentName:"td",href:"https://github.com/getsolus/ypkg/pull/1"},"More info"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%python_compile")),(0,r.kt)("td",{parentName:"tr",align:null},"Compiles ",(0,r.kt)("inlineCode",{parentName:"td"},"*.py")," files using python2. This is only useful where the build doesn't compile them already (indicated by availability of ",(0,r.kt)("inlineCode",{parentName:"td"},"*.pyc")," files).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%python3_setup")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs the build portion of a setup.py using python3.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%python3_install")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs the install portion of a setup.py, to the appropriate root, using python3.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%python3_test")),(0,r.kt)("td",{parentName:"tr",align:null},"Without argument, runs the test portion of setup.py. With a ",(0,r.kt)("inlineCode",{parentName:"td"},".py"),' script, execute the script with python3. With something else execute the command "as it is". (',(0,r.kt)("a",{parentName:"td",href:"https://github.com/getsolus/ypkg/pull/1"},"More info"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%python3_compile")),(0,r.kt)("td",{parentName:"tr",align:null},"Compiles ",(0,r.kt)("inlineCode",{parentName:"td"},"*.py")," files using python3. This is only useful where the build doesn't compile them already (indicated by availability of ",(0,r.kt)("inlineCode",{parentName:"td"},"*.pyc")," files).")))),(0,r.kt)("h3",{id:"ruby-actionable-macros"},"Ruby Actionable Macros"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Macro"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%gem_build")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs gem build.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%gem_install")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs gem install with the appropriate parameters.")))),(0,r.kt)("h3",{id:"qt-actionable-macros"},"Qt Actionable Macros"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Macro"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%qmake")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs qmake for Qt5 with the appropriate make flags.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%qmake4")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs qmake for Qt4, as well as adding the necessary MOC, RCC, and UIC flags since those Qt4 executables end in -qt4.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%qml_cache")),(0,r.kt)("td",{parentName:"tr",align:null},"Compiles ",(0,r.kt)("inlineCode",{parentName:"td"},"*.qml")," files into ",(0,r.kt)("inlineCode",{parentName:"td"},"*.qmlc")," so they are compiled ahead of time.")))),(0,r.kt)("h3",{id:"waf-actionable-macros"},"Waf Actionable Macros"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Macro"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%waf_configure")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs waf configure with prefix.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%waf_build")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs waf and passes our ",(0,r.kt)("inlineCode",{parentName:"td"},"%JOBS%")," variable.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%waf_install")),(0,r.kt)("td",{parentName:"tr",align:null},"Runs waf install and passed the appropriate ",(0,r.kt)("inlineCode",{parentName:"td"},"destdir")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"%JOBS%")," variable")))),(0,r.kt)("h3",{id:"variable-macros"},"Variable Macros"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Macro"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%ARCH%")),(0,r.kt)("td",{parentName:"tr",align:null},"Indicates the current build architecture.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%CC%")),(0,r.kt)("td",{parentName:"tr",align:null},"C compiler")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%CFLAGS%")),(0,r.kt)("td",{parentName:"tr",align:null},"cflags as set in ",(0,r.kt)("inlineCode",{parentName:"td"},"eopkg.conf"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%CONFOPTS%")),(0,r.kt)("td",{parentName:"tr",align:null},"Flags / options for configuration, such as ",(0,r.kt)("inlineCode",{parentName:"td"},"--prefix=%PREFIX%"),". ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/getsolus/ypkg/blob/master/ypkg2/rc.yml#L376-378"},"Full List."))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%CXX%")),(0,r.kt)("td",{parentName:"tr",align:null},"C++ compiler")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%CXXFLAGS%")),(0,r.kt)("td",{parentName:"tr",align:null},"cxxflags as set in ",(0,r.kt)("inlineCode",{parentName:"td"},"eopkg.conf"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%JOBS%")),(0,r.kt)("td",{parentName:"tr",align:null},"jobs, as set in ",(0,r.kt)("inlineCode",{parentName:"td"},"eopkg.conf"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%LDFLAGS%")),(0,r.kt)("td",{parentName:"tr",align:null},"ldflags as set in ",(0,r.kt)("inlineCode",{parentName:"td"},"eopkg.conf"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%LIBSUFFIX%")),(0,r.kt)("td",{parentName:"tr",align:null},"Library suffix (either 32 for 32-bit or 64 for 64-bit)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%PREFIX%")),(0,r.kt)("td",{parentName:"tr",align:null},"Hard-coded prefix ",(0,r.kt)("inlineCode",{parentName:"td"},"/usr"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%YJOBS%")),(0,r.kt)("td",{parentName:"tr",align:null},"Job count without ",(0,r.kt)("inlineCode",{parentName:"td"},"-j")," as set in ",(0,r.kt)("inlineCode",{parentName:"td"},"eopkg.conf"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%installroot%")),(0,r.kt)("td",{parentName:"tr",align:null},"Hard-coded install directory")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%libdir%")),(0,r.kt)("td",{parentName:"tr",align:null},"The distribution\u2019s default library directory, i.e. ",(0,r.kt)("inlineCode",{parentName:"td"},"/usr/lib64")," (Alters for ",(0,r.kt)("inlineCode",{parentName:"td"},"emul32"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%version%")),(0,r.kt)("td",{parentName:"tr",align:null},"Version of the package, as specified in the version key.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"%workdir%")),(0,r.kt)("td",{parentName:"tr",align:null},"Hard-coded work directory (source tree)")))),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("p",null,"A set of variables are exported in our build stages. These are used to provide context and structure to the scripts."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Variable"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"$CFLAGS")),(0,r.kt)("td",{parentName:"tr",align:null},"cflags as set in ",(0,r.kt)("inlineCode",{parentName:"td"},"eopkg.conf"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"$CXXFLAGS")),(0,r.kt)("td",{parentName:"tr",align:null},"cxxflags as set in ",(0,r.kt)("inlineCode",{parentName:"td"},"eopkg.conf"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"$LDFLAGS")),(0,r.kt)("td",{parentName:"tr",align:null},"ldflags as set in ",(0,r.kt)("inlineCode",{parentName:"td"},"eopkg.conf"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"$CC")),(0,r.kt)("td",{parentName:"tr",align:null},"C compiler")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"$CXX")),(0,r.kt)("td",{parentName:"tr",align:null},"C++ compiler")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"$EMUL32BUILD")),(0,r.kt)("td",{parentName:"tr",align:null},"Set only when compiling in ",(0,r.kt)("inlineCode",{parentName:"td"},"emul32")," mode")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"$installdir")),(0,r.kt)("td",{parentName:"tr",align:null},"The install directory, i.e. where files are installed to for packaging")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"$pkgfiles")),(0,r.kt)("td",{parentName:"tr",align:null},"Refers to the ",(0,r.kt)("inlineCode",{parentName:"td"},"./files")," directory relative to the ",(0,r.kt)("inlineCode",{parentName:"td"},"package.yml")," file")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"$sources")),(0,r.kt)("td",{parentName:"tr",align:null},"Refers to the directory where your source files are stored e.g. ",(0,r.kt)("inlineCode",{parentName:"td"},"$sources/nano.tar.gz"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"$workdir")),(0,r.kt)("td",{parentName:"tr",align:null},"The work, or source, directory of the package build")))),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"package.yml")," file uses native YAML types, however it follows syntactic conventions and may accept multiple value types for a given key."),(0,r.kt)("h3",{id:"string"},"string"),(0,r.kt)("p",null,"This is simply text, which does not need to be quoted."),(0,r.kt)("h3",{id:"strings"},"string(s)"),(0,r.kt)("p",null,"Indicates that it is possible to use a ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," of strings, or one single ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,r.kt)("h3",{id:"integer"},"integer"),(0,r.kt)("p",null,"Whole, positive number, used in the ",(0,r.kt)("inlineCode",{parentName:"p"},"release")," field."),(0,r.kt)("h3",{id:"list"},"list"),(0,r.kt)("p",null,"A YAML list (or array) can be expressed in multiple ways. A short array-notation would look like this:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[one, two, three]")),(0,r.kt)("p",null,"They can also be expressed like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- First Value\n- Second Value\n- Third Value\n")),(0,r.kt)("h3",{id:"dict"},"dict"),(0,r.kt)("p",null,"Known as an associative array, this is key to value mapping. These are separated by a colon (",(0,r.kt)("inlineCode",{parentName:"p"},":"),"), the token on the left is taken to be a key, and the token on the right is the value."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SomeKey: Some Value")),(0,r.kt)("p",null,"Note that each ",(0,r.kt)("inlineCode",{parentName:"p"},"ypkg key")," in the YAML file is actually a dict."),(0,r.kt)("h3",{id:"dicts"},"dict(s)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"dict(s)")," consists of a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"dict"),"s and some assumptions. We primarily make use of this to express advanced information within the package. These permit you to provide no key, and a value only.\nIn this instance, the key is implicitly assumed to be the package name (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"nano"),"):"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"- some value")),(0,r.kt)("p",null,"An explicit key, usually a sub-package name:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"- somekey: somevalue")),(0,r.kt)("p",null,"A mix of both:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- somevalue\n- somekey: another value\n")),(0,r.kt)("p",null,"The values may also be expressed in list form, still using the same default key logic:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- [one,two, three]\n- somekey: [one,two, three]\n- key:\n    - value one\n    - value two\n    - value three\n")),(0,r.kt)("h2",{id:"packaging-practices"},"Packaging Practices"),(0,r.kt)("p",null,"The concepts in this document merely expose the syntax of a ",(0,r.kt)("inlineCode",{parentName:"p"},"package.yml")," file. Solus adheres to strict packaging practices and conventions which packagers must follow. They are explained in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/packaging/packaging-practices"},"Packaging Practices")," article."))}k.isMDXComponent=!0}}]);